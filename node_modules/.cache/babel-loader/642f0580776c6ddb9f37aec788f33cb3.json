{"ast":null,"code":"var _jsxFileName = \"/Users/dom/Desktop/test/react-redux-memory-game/src/Game.js\";\nimport React, { Component } from 'react';\nimport './Game.css';\nimport CardView from './CardView';\nimport { connect } from 'react-redux';\nimport { flipUpCard, checkUnmatchedPair, checkMatchedPair, initGame, showNumCardsSelection } from './actions';\nimport QuantityCard from './QuantityCard';\nimport GameStatus from './GameStatus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet timeOut = null;\n\nclass Game extends Component {\n  render() {\n    const cardViews = this.getCardViews();\n    let gameHUD = undefined;\n\n    if (this.props.showNumCardsSelection) {\n      gameHUD = /*#__PURE__*/_jsxDEV(QuantityCard, {\n        onInitGame: this.props.onInitGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 23\n      }, this);\n    } else {\n      gameHUD = /*#__PURE__*/_jsxDEV(GameStatus, {\n        gameComplete: this.props.gameComplete,\n        turnCard: this.props.turnCard,\n        pairsFound: this.props.pairsFound,\n        ShowCardsQuantity: this.props.ShowCardsQuantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 23\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: gameHUD\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CardContainer\",\n        children: cardViews\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n\n  getCardViews() {\n    const cardViews = this.props.cards.map(c => /*#__PURE__*/_jsxDEV(CardView, {\n      id: c.id,\n      image: c.image,\n      imageUp: c.imageUp,\n      matched: c.matched,\n      onClick: this.props.onCardClicked\n    }, c.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this));\n    return cardViews;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    cards: state.cards,\n    turnCard: state.turnCard,\n    gameComplete: state.gameComplete,\n    pairsFound: state.pairsFound,\n    showNumCardsSelection: state.showNumCardsSelection\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCardClicked: id => {\n      clearInterval(timeOut);\n      dispatch(flipUpCard(id));\n      dispatch(checkMatchedPair());\n      timeOut = setTimeout(() => {\n        dispatch(checkUnmatchedPair());\n      }, 4000);\n    },\n    ShowCardsQuantity: () => {\n      dispatch(showNumCardsSelection());\n    },\n    onInitGame: numPairs => {\n      dispatch(initGame(numPairs));\n    }\n  };\n};\n\nconst GameView = connect(mapStateToProps, mapDispatchToProps)(Game);\nexport default GameView;","map":{"version":3,"sources":["/Users/dom/Desktop/test/react-redux-memory-game/src/Game.js"],"names":["React","Component","CardView","connect","flipUpCard","checkUnmatchedPair","checkMatchedPair","initGame","showNumCardsSelection","QuantityCard","GameStatus","timeOut","Game","render","cardViews","getCardViews","gameHUD","undefined","props","onInitGame","gameComplete","turnCard","pairsFound","ShowCardsQuantity","cards","map","c","id","image","imageUp","matched","onCardClicked","mapStateToProps","state","mapDispatchToProps","dispatch","clearInterval","setTimeout","numPairs","GameView"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Game.css';\nimport CardView from './CardView';\nimport { connect } from 'react-redux'\nimport { flipUpCard, checkUnmatchedPair, checkMatchedPair, initGame, showNumCardsSelection } from './actions';\nimport QuantityCard from './QuantityCard';\nimport GameStatus from './GameStatus';\n\nlet timeOut = null;\n\nclass Game extends Component {\n    render() {\n        const cardViews = this.getCardViews();\n        let gameHUD = undefined;\n\n        if (this.props.showNumCardsSelection) {\n            gameHUD = <QuantityCard onInitGame={this.props.onInitGame} />;\n        } else {\n            gameHUD = <GameStatus\n                gameComplete={this.props.gameComplete}\n                turnCard={this.props.turnCard}\n                pairsFound={this.props.pairsFound}\n                ShowCardsQuantity={this.props.ShowCardsQuantity}\n            />;\n        }\n\n        return (\n            <div className='Game'>\n                <div className='status'>\n                    {gameHUD}\n                </div>\n                <div className='CardContainer'>\n                    {cardViews}\n                </div>\n            </div>\n        );\n    }\n\n    getCardViews() {\n        const cardViews = this.props.cards.map(c =>\n            <CardView key={c.id}\n                id={c.id}\n                image={c.image}\n                imageUp={c.imageUp}\n                matched={c.matched}\n                onClick={this.props.onCardClicked} />\n        );\n        return cardViews;\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        cards: state.cards,\n        turnCard: state.turnCard,\n        gameComplete: state.gameComplete,\n        pairsFound: state.pairsFound,\n        showNumCardsSelection: state.showNumCardsSelection\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCardClicked: id => {\n            clearInterval(timeOut);\n            dispatch(flipUpCard(id));\n            dispatch(checkMatchedPair());\n            timeOut = setTimeout(() => {\n                dispatch(checkUnmatchedPair())\n            }, 4000);\n        },\n        ShowCardsQuantity: () => {\n            dispatch(showNumCardsSelection());\n        },\n        onInitGame: numPairs => {\n            dispatch(initGame(numPairs));\n        }\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Game)\n\nexport default GameView;\n\n"]},"metadata":{},"sourceType":"module"}